import type { FormData } from "@/lib/form-validation";

// –¢–∏–ø—ã –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API
export interface ApiFormData {
  firstName: string;
  middleName: string;
  lastName: string;
  phone: string;
  amountOwed: number;
  email?: string;
  passportSerial?: string;
  passportNumber?: string;
  address?: string;
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX
 */
function normalizePhoneNumber(phone: string): string {
  const digitsOnly = phone.replace(/[^\d+]/g, "");
  const numbersOnly = digitsOnly.replace(/\D/g, "");

  if (!numbersOnly) return "";

  const normalizedNumber = numbersOnly.startsWith("8")
    ? "7" + numbersOnly.slice(1)
    : numbersOnly;

  if (normalizedNumber.startsWith("7") && normalizedNumber.length === 11) {
    return "+" + normalizedNumber;
  }

  if (normalizedNumber.length === 10) {
    return "+7" + normalizedNumber;
  }

  if (normalizedNumber.startsWith("7") && normalizedNumber.length === 11) {
    return "+" + normalizedNumber;
  }

  return "+7" + normalizedNumber.slice(-10);
}

/**
 * –†–∞–∑–¥–µ–ª—è–µ—Ç –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä
 */
function parsePassportData(passport: string): {
  serial: string;
  number: string;
} {
  const digitsOnly = passport.replace(/\D/g, "");

  if (!digitsOnly) {
    return { serial: "", number: "" };
  }

  if (digitsOnly.length <= 4) {
    return { serial: digitsOnly, number: "" };
  }

  const serial = digitsOnly.slice(0, 4);
  const number = digitsOnly.slice(4);

  return { serial, number };
}

/**
 * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
 */
function transformFormDataForApi(formData: FormData): ApiFormData {
  const normalizedPhone = normalizePhoneNumber(formData.phone);
  const { serial: passportSerial, number: passportNumber } = parsePassportData(
    formData.passport
  );

  return {
    firstName: formData.firstName.trim(),
    middleName: formData.middleName.trim(),
    lastName: formData.lastName.trim(),
    phone: normalizedPhone,
    amountOwed: Number(formData.amountOwed),
    email: formData.email.trim() || undefined,
    passportSerial: passportSerial || undefined,
    passportNumber: passportNumber || undefined,
    address: formData.address.trim() || undefined,
  };
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ API
 */
function validateApiData(apiData: ApiFormData): {
  isValid: boolean;
  errors: string[];
} {
  const errors: string[] = [];

  if (!apiData.firstName) errors.push("–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
  if (!apiData.lastName) errors.push("–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
  if (!apiData.middleName) errors.push("–û—Ç—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
  if (!apiData.phone) errors.push("–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");
  if (!apiData.amountOwed)
    errors.push("–°—É–º–º–∞ –¥–æ–ª–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è");

  if (apiData.phone && !/^\+7\d{10}$/.test(apiData.phone)) {
    errors.push("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
  }

  if (apiData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(apiData.email)) {
    errors.push("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email");
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
function logTransformation(
  originalData: FormData,
  transformedData: ApiFormData
): void {
  if (process.env.NODE_ENV === "development") {
    console.group("üîÑ Form Data Transformation");
    console.log("üìù Original:", originalData);
    console.log("üöÄ Transformed:", transformedData);
    console.groupEnd();
  }
}

// –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
export interface ApiResponse<T = any> {
  success: boolean;
  message?: string;
  error?: string;
  code?: string;
  data?: T;
}

export interface LeadResponse {
  id: string;
  status: string;
  createdAt: string;
  estimatedCallTime: string;
}

export interface VerificationResponse {
  phone: string;
  expiresIn: number;
  canResendAfter: number;
}

/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
 * @param formData - –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
 * @returns –æ—Ç–≤–µ—Ç –æ—Ç API
 */
export async function submitLead(
  formData: FormData
): Promise<ApiResponse<LeadResponse>> {
  try {
    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç API
    const apiData = transformFormDataForApi(formData);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    logTransformation(formData, apiData);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const validation = validateApiData(apiData);
    if (!validation.isValid) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${validation.errors.join(", ")}`
      );
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch("/api/external-lead", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(apiData),
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏");
    }

    return result;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:", error);
    throw error;
  }
}

/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @param phone - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±—É–¥–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω)
 * @returns –æ—Ç–≤–µ—Ç –æ—Ç API
 */
export async function sendVerificationCode(
  phone: string
): Promise<ApiResponse<VerificationResponse>> {
  try {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const normalizedPhone = transformFormDataForApi({
      phone,
      firstName: "",
      lastName: "",
      middleName: "",
      email: "",
      birthYear: "",
      passport: "",
      address: "",
      amountOwed: "",
      privacyConsent: false,
    }).phone;

    const response = await fetch("/api/verification-phone", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        phone: normalizedPhone,
      }),
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞");
    }

    return result;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:", error);
    throw error;
  }
}

/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @param phone - –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±—É–¥–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω)
 * @param code - –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * @returns –æ—Ç–≤–µ—Ç –æ—Ç API
 */
export async function verifyPhoneCode(
  phone: string,
  code: string
): Promise<ApiResponse> {
  try {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const normalizedPhone = transformFormDataForApi({
      phone,
      firstName: "",
      lastName: "",
      middleName: "",
      email: "",
      birthYear: "",
      passport: "",
      address: "",
      amountOwed: "",
      privacyConsent: false,
    }).phone;

    const response = await fetch("/api/verification-phone", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        phone: normalizedPhone,
        code,
        action: "verify",
      }),
    });

    const result = await response.json();

    if (!response.ok) {
      throw new Error(result.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞");
    }

    return result;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞:", error);
    throw error;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export { transformFormDataForApi };
